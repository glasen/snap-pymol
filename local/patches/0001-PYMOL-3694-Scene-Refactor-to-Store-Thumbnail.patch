From cb277dfd86ce6ddb2d37c72010c9b96b4ef04e6e Mon Sep 17 00:00:00 2001
From: Thomas Stewart <stewart@schrodinger.com>
Date: Thu, 1 Jul 2021 13:24:37 -0400
Subject: [PATCH] PYMOL-3694 Scene Refactor to Store Thumbnail - Adding a
 pymol::Image thumbnail to MovieScene     - This allows the thumbnail to be
 directly       tied to the Scene when it's stored - Adding set and get
 methods to Image.h

---
 layer0/MyPNG.h                  |  2 --
 layer1/Image.h                  | 18 ++++++++++++
 layer1/Scene.cpp                |  8 +++--
 layer1/Scene.h                  |  5 ++--
 layer1/SceneDef.h               |  1 +
 layer3/Executive.cpp            |  2 +-
 layer3/MovieScene.cpp           | 52 +++++++++++++++++++++++++++------
 layer3/MovieScene.h             |  8 +++++
 layer4/Cmd.cpp                  | 19 +++++++++++-
 modules/pmg_qt/scene_bin_gui.py | 14 ++-------
 modules/pymol/api.py            |  1 +
 modules/pymol/viewing.py        | 16 +++++++---
 12 files changed, 112 insertions(+), 34 deletions(-)

diff --git a/layer0/MyPNG.h b/layer0/MyPNG.h
index ecc4c812..3bddda17 100644
--- a/layer0/MyPNG.h
+++ b/layer0/MyPNG.h
@@ -28,8 +28,6 @@ Z* -------------------------------------------------------------------
 #define cMyPNG_FormatPNG 0
 #define cMyPNG_FormatPPM 1
 
-using png_outbuf_t = std::vector</* png_byte */ unsigned char>;
-
 int MyPNGWrite(const char* file_name, const pymol::Image& img, const float dpi,
     const int format, const int quiet, const float screen_gamma,
     const float file_gamma, png_outbuf_t* io_ptr = nullptr);
diff --git a/layer1/Image.h b/layer1/Image.h
index b416471e..6663e76d 100644
--- a/layer1/Image.h
+++ b/layer1/Image.h
@@ -6,6 +6,8 @@
 #include "pymol/algorithm.h"
 #include "pymol/type_traits.h"
 
+using png_outbuf_t = std::vector</* png_byte */ unsigned char>;
+
 namespace pymol
 {
 
@@ -233,6 +235,22 @@ public:
     return newImg;
   }
 
+  /*
+  * Return the entire vector stored in m_data
+  */
+  std::vector<unsigned char> getVecData() const
+  {
+    return m_data;
+  }
+
+  /*
+  * Store an entire vector in m_data
+  */
+  void setVecData(std::vector<unsigned char> VecData)
+  {
+    m_data = std::move(VecData);
+  }
+
   bool m_needs_alpha_reset{}; /* needs alpha reset */
 };
 } // namespace pymol
diff --git a/layer1/Scene.cpp b/layer1/Scene.cpp
index 6bbf9620..05e60654 100644
--- a/layer1/Scene.cpp
+++ b/layer1/Scene.cpp
@@ -3939,8 +3939,8 @@ static int SceneDeferredImage(DeferredImage * di)
 {
   PyMOLGlobals *G = di->m_G;
   SceneMakeSizedImage(G, di->width, di->height, di->antialias);
-  if(!di->filename.empty()) {
-    ScenePNG(G, di->filename.c_str(), di->dpi, di->quiet, false, di->format);
+  if(!di->filename.empty() || di->outbuf) {
+    ScenePNG(G, di->filename.c_str(), di->dpi, di->quiet, false, di->format, di->outbuf);
   } else if(call_raw_image_callback(G)) {
   } else if(G->HaveGUI && SettingGetGlobal_b(G, cSetting_auto_copy_images)) {
 #ifdef _PYMOL_IP_EXTRAS
@@ -3962,7 +3962,8 @@ static int SceneDeferredImage(DeferredImage * di)
  * @return 1 if rendering was deferred, 0 if it was rendered immediately.
  */
 int SceneDeferImage(PyMOLGlobals * G, int width, int height,
-                    const char *filename, int antialias, float dpi, int format, int quiet)
+                    const char *filename, int antialias, float dpi, int format, int quiet,
+                    png_outbuf_t* outbuf)
 {
   auto di = pymol::make_unique<DeferredImage>(G);
   if(di) {
@@ -3973,6 +3974,7 @@ int SceneDeferImage(PyMOLGlobals * G, int width, int height,
     di->dpi = dpi;
     di->format = format;
     di->quiet = quiet;
+    di->outbuf = outbuf;
     if(filename){
       di->filename = filename;
     }
diff --git a/layer1/Scene.h b/layer1/Scene.h
index a9514a4a..e0ca3f13 100644
--- a/layer1/Scene.h
+++ b/layer1/Scene.h
@@ -181,8 +181,9 @@ void SceneUpdateStereoMode(PyMOLGlobals * G);
 void SceneSuppressMovieFrame(PyMOLGlobals * G);
 int SceneDeferClick(Block * block, int button, int x, int y, int mod);
 int SceneDeferDrag(Block * block, int x, int y, int mod);
-int SceneDeferImage(PyMOLGlobals * G, int width, int height, const char *filename,
-                    int antialias, float dpi, int format, int quiet);
+int SceneDeferImage(PyMOLGlobals* G, int width, int height,
+    const char* filename, int antialias, float dpi, int format, int quiet,
+    png_outbuf_t* outbuf);
 const char *SceneGetSeleModeKeyword(PyMOLGlobals * G);
 void SceneUpdateStereo(PyMOLGlobals * G);
 float ScenePushRasterMatrix(PyMOLGlobals * G, float *v);
diff --git a/layer1/SceneDef.h b/layer1/SceneDef.h
index 211b530a..7ee5499f 100644
--- a/layer1/SceneDef.h
+++ b/layer1/SceneDef.h
@@ -55,6 +55,7 @@ struct DeferredImage : public CDeferred {
   float dpi { 0.0f };
   int entire_window { 0 };
   int format { 0 };
+  png_outbuf_t* outbuf;
   DeferredImage(PyMOLGlobals * G) : CDeferred(G){}
 };
 
diff --git a/layer3/Executive.cpp b/layer3/Executive.cpp
index 74a683db..ad3aa8ff 100644
--- a/layer3/Executive.cpp
+++ b/layer3/Executive.cpp
@@ -2324,7 +2324,7 @@ int ExecutiveDrawCmd(PyMOLGlobals * G, int width, int height, int antialias,
       ExecutiveSetSettingFromString(G, cSetting_draw_mode, "-2", "", -1, true, true);
       SceneUpdate(G, false);
     }
-    SceneDeferImage(G, width, height, NULL, antialias, -1.0, cMyPNG_FormatPNG, quiet);
+    SceneDeferImage(G, width, height, NULL, antialias, -1.0, cMyPNG_FormatPNG, quiet, nullptr);
   }
   return 1;
 }
diff --git a/layer3/MovieScene.cpp b/layer3/MovieScene.cpp
index 4ab8ccc7..3f759891 100644
--- a/layer3/MovieScene.cpp
+++ b/layer3/MovieScene.cpp
@@ -34,7 +34,8 @@ enum {
   STORE_ACTIVE = (1 << 1),
   STORE_COLOR  = (1 << 2),
   STORE_REP    = (1 << 3),
-  STORE_FRAME  = (1 << 4)
+  STORE_FRAME  = (1 << 4),
+  STORE_THUMBNAIL = (1 << 5)
 };
 
 void SceneSetNames(PyMOLGlobals * G, const std::vector<std::string> &list);
@@ -46,6 +47,23 @@ const std::vector<std::string> & MovieSceneGetOrder(PyMOLGlobals * G) {
   return G->scenes->order;
 }
 
+/**
+ * Get thumbnail of a scene based on name
+ */
+png_outbuf_t MovieSceneGetThumbnail(PyMOLGlobals* G, pymol::zstring_view name)
+{
+  auto scenes = G->scenes + cMovieSceneStackDefault;
+  auto it = scenes->dict.find(name.c_str());
+
+  if (it == scenes->dict.end()) {
+    return {};
+  }
+
+  png_outbuf_t out_buf = it->second.thumbnail.getVecData();
+
+  return out_buf;
+}
+
 /**
  * Get a unique scene key
  */
@@ -158,6 +176,7 @@ pymol::Result<> MovieSceneOrder(PyMOLGlobals* G, std::vector<std::string> names_
  * @param store_active    store enabled/disabled
  * @param store_rep       store reps
  * @param store_frame     store movie frame
+ * @param store_thumbnail store the thumbnail
  */
 pymol::Result<> MovieSceneStore(PyMOLGlobals * G, const char * name,
     const char * message,
@@ -166,6 +185,7 @@ pymol::Result<> MovieSceneStore(PyMOLGlobals * G, const char * name,
     bool store_active,
     bool store_rep,
     bool store_frame,
+    bool store_thumbnail,
     const char * sele,
     size_t stack)
 {
@@ -196,7 +216,8 @@ pymol::Result<> MovieSceneStore(PyMOLGlobals * G, const char * name,
       (store_active ? STORE_ACTIVE : 0) |
       (store_color ? STORE_COLOR : 0) |
       (store_rep ? STORE_REP : 0) |
-      (store_frame ? STORE_FRAME : 0));
+      (store_frame ? STORE_FRAME : 0) |
+      (store_thumbnail ? STORE_THUMBNAIL : 0));
 
   // message
   scene.message = message ? message : "";
@@ -207,6 +228,17 @@ pymol::Result<> MovieSceneStore(PyMOLGlobals * G, const char * name,
   // frame
   scene.frame = SceneGetFrame(G);
 
+  // thumbnail
+  int thumbnail_width = 200;
+  int thumbnail_height = 100;
+  scene.thumbnail = pymol::Image(thumbnail_width, thumbnail_height);
+  png_outbuf_t png_buf;
+  ExecutiveDrawNow(G);
+  SceneDeferImage(G, scene.thumbnail.getWidth(), scene.thumbnail.getHeight(),
+      nullptr, 0, -1, 0, 1, &png_buf);
+  scene.thumbnail.setVecData(png_buf);
+  SceneInvalidate(G); // Used to refresh the screen
+
   // atomdata
   if (store_color || store_rep) {
 
@@ -620,9 +652,9 @@ pymol::Result<> MovieSceneFunc(PyMOLGlobals* G, const MovieSceneFuncArgs& args)
 
   PRINTFB(G, FB_Scene, FB_Blather)
     " MovieScene: key=%s action=%s message=%s store_view=%d store_color=%d"
-    " store_active=%d store_rep=%d animate=%f new_key=%s hand=%d\n",
-    key.c_str(), action.c_str(), args.message.c_str(), args.store_view, args.store_color, args.store_active, args.store_rep,
-    args.animate, args.new_key.c_str(), args.hand
+    " store_active=%d store_rep=%d store_thumbnail=%d animate=%f new_key=%s hand=%d\n",
+    key.c_str(), action.c_str(), args.message.c_str(), args.store_view, args.store_color, args.store_active,
+    args.store_rep, args.store_thumbnail, args.animate, args.new_key.c_str(), args.hand
     ENDFB(G);
 
   // insert_before, insert_after
@@ -657,13 +689,15 @@ pymol::Result<> MovieSceneFunc(PyMOLGlobals* G, const MovieSceneFuncArgs& args)
       ExecutiveSetObjVisib(G, "*", false, false);
       MovieSceneRecallMessage(G, "");
     } else {
-      status = MovieSceneRecall(G, key.c_str(), args.animate, args.store_view, args.store_color,
-          args.store_active, args.store_rep, args.store_frame, args.sele.c_str(), args.stack);
+      status = MovieSceneRecall(G, key.c_str(), args.animate, args.store_view,
+      args.store_color, args.store_active, args.store_rep, args.store_frame,
+      args.sele.c_str(), args.stack);
     }
 
   } else if (action == "store") {
-    status = MovieSceneStore(G, key.c_str(), args.message.c_str(), args.store_view, args.store_color,
-        args.store_active, args.store_rep, args.store_frame, args.sele.c_str(), args.stack);
+    status = MovieSceneStore(G, key.c_str(), args.message.c_str(), args.store_view,
+    args.store_color, args.store_active, args.store_rep, args.store_frame, args.store_thumbnail,
+    args.sele.c_str(), args.stack);
 
     // insert_before, insert_after
     if (status && beforeafter)
diff --git a/layer3/MovieScene.h b/layer3/MovieScene.h
index 1bd55567..0113fc55 100644
--- a/layer3/MovieScene.h
+++ b/layer3/MovieScene.h
@@ -12,6 +12,7 @@
 #include "PyMOLGlobals.h"
 #include "Result.h"
 #include "SceneView.h"
+#include "Image.h"
 
 #include <vector>
 #include <string>
@@ -32,6 +33,7 @@ struct MovieSceneFuncArgs
   bool store_active = true;
   bool store_rep = true;
   bool store_frame = true;
+  bool store_thumbnail = true;
   float animate = -1.0f;
   std::string new_key;
   bool hand = true;
@@ -74,6 +76,9 @@ public:
   /// camera view
   SceneViewType view;
 
+  /// A png buffer storing a thumbnail of the scene
+  pymol::Image thumbnail;
+
   /// atom properties (color, rep, etc.)
   std::map<int, MovieSceneAtom> atomdata;
 
@@ -107,6 +112,7 @@ pymol::Result<> MovieSceneStore(PyMOLGlobals * G, const char * name,
     bool store_active,
     bool store_rep,
     bool store_frame,
+    bool store_thumbnail,
     const char * sele,
     std::size_t stack);
 
@@ -134,6 +140,8 @@ pymol::Result<> MovieSceneOrder(PyMOLGlobals* G, std::vector<std::string> names,
     bool sort = false, const char* location = nullptr);
 
 const std::vector<std::string> & MovieSceneGetOrder(PyMOLGlobals * G);
+std::vector<unsigned char> MovieSceneGetThumbnail(
+    PyMOLGlobals* G, pymol::zstring_view name);
 
 void MovieScenesInit(PyMOLGlobals * G);
 void MovieScenesFree(PyMOLGlobals * G);
diff --git a/layer4/Cmd.cpp b/layer4/Cmd.cpp
index f545ba58..2484cbfa 100644
--- a/layer4/Cmd.cpp
+++ b/layer4/Cmd.cpp
@@ -1231,6 +1231,22 @@ static PyObject *CmdGetSceneOrder(PyObject * self, PyObject * args)
   return (APIAutoNone(result));
 }
 
+static PyObject* CmdGetSceneThumbnail(PyObject* self, PyObject* args)
+{
+  PyMOLGlobals* G = nullptr;
+  const char* name;
+
+  API_SETUP_ARGS(G, self, args, "Os", &self, &name);
+  APIEnterBlocked(G);
+
+  png_outbuf_t pngbuf = MovieSceneGetThumbnail(G, name);
+
+  APIExitBlocked(G);
+
+  return PyBytes_FromStringAndSize(
+      reinterpret_cast<const char*>(pngbuf.data()), pngbuf.size());
+}
+
 static PyObject *CmdSculptDeactivate(PyObject * self, PyObject * args)
 {
   PyMOLGlobals *G = NULL;
@@ -4769,7 +4785,7 @@ static PyObject *CmdPNG(PyObject * self, PyObject * args)
                  NULL, NULL, 0.0F, 0.0F, false, NULL, true, -1);
       } else if(width || height) {
         prior = !SceneDeferImage(
-            G, width, height, filename, -1, dpi, quiet, format);
+            G, width, height, filename, -1, dpi, format, quiet, nullptr);
         result = bool(filename);
       } else if(!SceneGetCopyType(G)) {
         ExecutiveDrawNow(G);      /* TODO STATUS */
@@ -6441,6 +6457,7 @@ static PyMethodDef Cmd_methods[] = {
   {"scene", CmdScene, METH_VARARGS},
   {"scene_order", CmdSceneOrder, METH_VARARGS},
   {"get_scene_order", CmdGetSceneOrder, METH_VARARGS},
+  {"get_scene_thumbnail", CmdGetSceneThumbnail, METH_VARARGS},
   {"sculpt_deactivate", CmdSculptDeactivate, METH_VARARGS},
   {"sculpt_activate", CmdSculptActivate, METH_VARARGS},
   {"sculpt_iterate", CmdSculptIterate, METH_VARARGS},
diff --git a/modules/pmg_qt/scene_bin_gui.py b/modules/pmg_qt/scene_bin_gui.py
index 875e2fef..77b8564b 100644
--- a/modules/pmg_qt/scene_bin_gui.py
+++ b/modules/pmg_qt/scene_bin_gui.py
@@ -185,20 +185,10 @@ class ScenePanel(QtWidgets.QWidget):
         Returns a QPixmap object that can be assigned to a label
         in order to display the scene thumbnail.
         This will be obsolete and removed in the future.
-
-        Note:
-        Currently, this function goes to the scene and then calls cmd.png to
-        generate the PNG buffer.
-        This functionality should be transferred to a
-        different function that is called when creating a
-        new scene from anywhere and the PNG buffer should be
-        stored with the scene information. There is a
-        subtask set up for this purpose.
         '''
         scene_pix_map = QtGui.QPixmap()
-        self.cmd.scene(scene_name, animate=0)
-        scene_pix_map.loadFromData(self.cmd.png(None, 200, 100), "PNG")
-        self.cmd.refresh()
+        png_buf = self.cmd.get_scene_thumbnail(scene_name)
+        scene_pix_map.loadFromData(png_buf, "PNG")
         return scene_pix_map
 
     def _get_scene_image_label(self, scene_pix_map):
diff --git a/modules/pymol/api.py b/modules/pymol/api.py
index 8f51fda1..8cfc22dd 100644
--- a/modules/pymol/api.py
+++ b/modules/pymol/api.py
@@ -366,6 +366,7 @@ from .viewing import \
       get_viewport,       \
       get_vis,            \
       get_scene_list,     \
+      get_scene_thumbnail,\
       hide,               \
       ipython_image,      \
       label,              \
diff --git a/modules/pymol/viewing.py b/modules/pymol/viewing.py
index e52db6e9..e8b03571 100644
--- a/modules/pymol/viewing.py
+++ b/modules/pymol/viewing.py
@@ -891,6 +891,10 @@ PYMOL API
         with _self.lockcm:
             return _cmd.get_scene_order(_self._COb)
 
+    def get_scene_thumbnail(name, _self=cmd):
+        with _self.lockcm:
+            return _cmd.get_scene_thumbnail(_self._COb, name)
+
     def chain_session(_self=cmd):
         import os
         # assumes locked interpreter
@@ -1073,10 +1077,14 @@ SEE ALSO
                 _self.quit()
 
         # call C function
-        with _self.lockcm:
-            r = _cmd.scene(_self._COb, key, action, message, int(view),
-                    int(color), int(active), int(rep), int(frame),
-                    float(animate), new_key, int(hand), sele)
+        def func():
+            with _self.lockcm:
+                return _cmd.scene(_self._COb, key, action, message, int(view),
+                                    int(color),
+                                    int(active), int(rep), int(frame),
+                                    float(animate), new_key, int(hand), sele)
+
+        r = _self._call_with_opengl_context(func)
 
         # for presentation auto quit
         pymol._scene_quit_on_action = action
-- 
2.32.0

