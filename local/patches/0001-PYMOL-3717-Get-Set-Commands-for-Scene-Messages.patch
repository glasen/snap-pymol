From 0d2f6b6c720a5971a854f2ca7e22f793cf44b4b4 Mon Sep 17 00:00:00 2001
From: Thomas Stewart <stewart@schrodinger.com>
Date: Mon, 12 Jul 2021 14:38:50 -0400
Subject: [PATCH] PYMOL-3717 Get/Set Commands for Scene Messages

---
 layer3/MovieScene.cpp    | 35 +++++++++++++++++++++++++++++++++++
 layer3/MovieScene.h      |  4 +++-
 layer4/Cmd.cpp           | 38 ++++++++++++++++++++++++++++++++++++++
 modules/pymol/api.py     |  2 ++
 modules/pymol/viewing.py |  8 ++++++++
 5 files changed, 86 insertions(+), 1 deletion(-)

diff --git a/layer3/MovieScene.cpp b/layer3/MovieScene.cpp
index d4d5eda0..dbd9a50c 100644
--- a/layer3/MovieScene.cpp
+++ b/layer3/MovieScene.cpp
@@ -295,6 +295,41 @@ static void MovieSceneRecallMessage(PyMOLGlobals * G, const std::string &message
 #endif
 }
 
+/**
+ * Get message for a scene based on name
+ * @param name name of the scene
+ */
+std::string MovieSceneGetMessage(PyMOLGlobals* G, pymol::zstring_view name)
+{
+  auto scenes = G->scenes + cMovieSceneStackDefault;
+  auto it = scenes->dict.find(name.c_str());
+
+  if (it == scenes->dict.end()) {
+    return {};
+  }
+
+  return it->second.message;
+}
+
+/**
+ * Set message for a scene based on name
+ * @param name name of the scene
+ * @param message scene's message
+ */
+pymol::Result<> MovieSceneSetMessage(
+    PyMOLGlobals* G, pymol::zstring_view name, pymol::zstring_view message)
+{
+  auto scenes = G->scenes + cMovieSceneStackDefault;
+  auto it = scenes->dict.find(name.c_str());
+
+  if (it == scenes->dict.end()) {
+    return pymol::make_error(name, " could not be found.");
+  } else {
+    it->second.message = message.c_str();
+    return {};
+  }
+}
+
 /**
  * Set the frame or state, depending on whether a movie is defined and/or
  * playing, and depending on the scene_frame_mode setting.
diff --git a/layer3/MovieScene.h b/layer3/MovieScene.h
index 0113fc55..03a527d1 100644
--- a/layer3/MovieScene.h
+++ b/layer3/MovieScene.h
@@ -142,7 +142,9 @@ pymol::Result<> MovieSceneOrder(PyMOLGlobals* G, std::vector<std::string> names,
 const std::vector<std::string> & MovieSceneGetOrder(PyMOLGlobals * G);
 std::vector<unsigned char> MovieSceneGetThumbnail(
     PyMOLGlobals* G, pymol::zstring_view name);
-
+std::string MovieSceneGetMessage(PyMOLGlobals* G, pymol::zstring_view name);
+pymol::Result<> MovieSceneSetMessage(
+    PyMOLGlobals* G, pymol::zstring_view name, pymol::zstring_view message);
 void MovieScenesInit(PyMOLGlobals * G);
 void MovieScenesFree(PyMOLGlobals * G);
 
diff --git a/layer4/Cmd.cpp b/layer4/Cmd.cpp
index 239b4809..b49b5a25 100644
--- a/layer4/Cmd.cpp
+++ b/layer4/Cmd.cpp
@@ -1247,6 +1247,42 @@ static PyObject* CmdGetSceneThumbnail(PyObject* self, PyObject* args)
       reinterpret_cast<const char*>(pngbuf.data()), pngbuf.size());
 }
 
+static PyObject* CmdGetSceneMessage(PyObject* self, PyObject* args)
+{
+  PyMOLGlobals* G = nullptr;
+  const char* name;
+
+  API_SETUP_ARGS(G, self, args, "Os", &self, &name);
+  APIEnterBlocked(G);
+
+  std::string message = MovieSceneGetMessage(G, name);
+
+  APIExitBlocked(G);
+
+  auto result = PyString_FromString(message.c_str());
+
+  return APIAutoNone(result);
+}
+
+static PyObject* CmdSetSceneMessage(PyObject* self, PyObject* args)
+{
+  PyMOLGlobals* G = nullptr;
+  const char* name;
+  const char* message;
+
+  API_SETUP_ARGS(G, self, args, "Oss", &self, &name, &message);
+  APIEnterBlocked(G);
+
+  // TODO : Needs to be processed by undo.
+  auto result = MovieSceneSetMessage(G, name, message);
+
+  APIExitBlocked(G);
+  if (result) {
+    return APISuccess();
+  }
+  return APIFailure(G, result.error());
+}
+
 static PyObject *CmdSculptDeactivate(PyObject * self, PyObject * args)
 {
   PyMOLGlobals *G = NULL;
@@ -6458,6 +6494,8 @@ static PyMethodDef Cmd_methods[] = {
   {"scene_order", CmdSceneOrder, METH_VARARGS},
   {"get_scene_order", CmdGetSceneOrder, METH_VARARGS},
   {"get_scene_thumbnail", CmdGetSceneThumbnail, METH_VARARGS},
+  {"get_scene_message", CmdGetSceneMessage, METH_VARARGS},
+  {"set_scene_message", CmdSetSceneMessage, METH_VARARGS},
   {"sculpt_deactivate", CmdSculptDeactivate, METH_VARARGS},
   {"sculpt_activate", CmdSculptActivate, METH_VARARGS},
   {"sculpt_iterate", CmdSculptIterate, METH_VARARGS},
diff --git a/modules/pymol/api.py b/modules/pymol/api.py
index 8cfc22dd..3005491a 100644
--- a/modules/pymol/api.py
+++ b/modules/pymol/api.py
@@ -367,6 +367,8 @@ from .viewing import \
       get_vis,            \
       get_scene_list,     \
       get_scene_thumbnail,\
+      get_scene_message,  \
+      set_scene_message,  \
       hide,               \
       ipython_image,      \
       label,              \
diff --git a/modules/pymol/viewing.py b/modules/pymol/viewing.py
index e8b03571..f1605f28 100644
--- a/modules/pymol/viewing.py
+++ b/modules/pymol/viewing.py
@@ -895,6 +895,14 @@ PYMOL API
         with _self.lockcm:
             return _cmd.get_scene_thumbnail(_self._COb, name)
 
+    def get_scene_message(name, _self=cmd):
+        with _self.lockcm:
+            return _cmd.get_scene_message(_self._COb, name)
+
+    def set_scene_message(name, message, _self=cmd):
+        with _self.lockcm:
+            return _cmd.set_scene_message(_self._COb, name, message)
+
     def chain_session(_self=cmd):
         import os
         # assumes locked interpreter
-- 
2.32.0

